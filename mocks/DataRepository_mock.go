// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	dto "acronis/dto"
	mapper "acronis/mapper"

	mock "github.com/stretchr/testify/mock"

	repository "acronis/repository"
)

// MockDataRepository is an autogenerated mock type for the DataRepository type
type MockDataRepository struct {
	mock.Mock
}

type MockDataRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataRepository) EXPECT() *MockDataRepository_Expecter {
	return &MockDataRepository_Expecter{mock: &_m.Mock}
}

// DeleteDataFromDB provides a mock function with given fields: key
func (_m *MockDataRepository) DeleteDataFromDB(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataFromDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataRepository_DeleteDataFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataFromDB'
type MockDataRepository_DeleteDataFromDB_Call struct {
	*mock.Call
}

// DeleteDataFromDB is a helper method to define mock.On call
//   - key string
func (_e *MockDataRepository_Expecter) DeleteDataFromDB(key interface{}) *MockDataRepository_DeleteDataFromDB_Call {
	return &MockDataRepository_DeleteDataFromDB_Call{Call: _e.mock.On("DeleteDataFromDB", key)}
}

func (_c *MockDataRepository_DeleteDataFromDB_Call) Run(run func(key string)) *MockDataRepository_DeleteDataFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDataRepository_DeleteDataFromDB_Call) Return(_a0 error) *MockDataRepository_DeleteDataFromDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataRepository_DeleteDataFromDB_Call) RunAndReturn(run func(string) error) *MockDataRepository_DeleteDataFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataFromListInDB provides a mock function with given fields: key, value
func (_m *MockDataRepository) DeleteDataFromListInDB(key string, value interface{}) (repository.Item, error) {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataFromListInDB")
	}

	var r0 repository.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (repository.Item, error)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) repository.Item); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(repository.Item)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataRepository_DeleteDataFromListInDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataFromListInDB'
type MockDataRepository_DeleteDataFromListInDB_Call struct {
	*mock.Call
}

// DeleteDataFromListInDB is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockDataRepository_Expecter) DeleteDataFromListInDB(key interface{}, value interface{}) *MockDataRepository_DeleteDataFromListInDB_Call {
	return &MockDataRepository_DeleteDataFromListInDB_Call{Call: _e.mock.On("DeleteDataFromListInDB", key, value)}
}

func (_c *MockDataRepository_DeleteDataFromListInDB_Call) Run(run func(key string, value interface{})) *MockDataRepository_DeleteDataFromListInDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDataRepository_DeleteDataFromListInDB_Call) Return(_a0 repository.Item, _a1 error) *MockDataRepository_DeleteDataFromListInDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataRepository_DeleteDataFromListInDB_Call) RunAndReturn(run func(string, interface{}) (repository.Item, error)) *MockDataRepository_DeleteDataFromListInDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataByKeyFromDB provides a mock function with given fields: key
func (_m *MockDataRepository) GetDataByKeyFromDB(key string) (repository.Item, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetDataByKeyFromDB")
	}

	var r0 repository.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.Item, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) repository.Item); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(repository.Item)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataRepository_GetDataByKeyFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataByKeyFromDB'
type MockDataRepository_GetDataByKeyFromDB_Call struct {
	*mock.Call
}

// GetDataByKeyFromDB is a helper method to define mock.On call
//   - key string
func (_e *MockDataRepository_Expecter) GetDataByKeyFromDB(key interface{}) *MockDataRepository_GetDataByKeyFromDB_Call {
	return &MockDataRepository_GetDataByKeyFromDB_Call{Call: _e.mock.On("GetDataByKeyFromDB", key)}
}

func (_c *MockDataRepository_GetDataByKeyFromDB_Call) Run(run func(key string)) *MockDataRepository_GetDataByKeyFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDataRepository_GetDataByKeyFromDB_Call) Return(_a0 repository.Item, _a1 error) *MockDataRepository_GetDataByKeyFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataRepository_GetDataByKeyFromDB_Call) RunAndReturn(run func(string) (repository.Item, error)) *MockDataRepository_GetDataByKeyFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataFromDB provides a mock function with no fields
func (_m *MockDataRepository) GetDataFromDB() (map[string]repository.Item, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDataFromDB")
	}

	var r0 map[string]repository.Item
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]repository.Item, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]repository.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]repository.Item)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataRepository_GetDataFromDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataFromDB'
type MockDataRepository_GetDataFromDB_Call struct {
	*mock.Call
}

// GetDataFromDB is a helper method to define mock.On call
func (_e *MockDataRepository_Expecter) GetDataFromDB() *MockDataRepository_GetDataFromDB_Call {
	return &MockDataRepository_GetDataFromDB_Call{Call: _e.mock.On("GetDataFromDB")}
}

func (_c *MockDataRepository_GetDataFromDB_Call) Run(run func()) *MockDataRepository_GetDataFromDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataRepository_GetDataFromDB_Call) Return(_a0 map[string]repository.Item, _a1 error) *MockDataRepository_GetDataFromDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataRepository_GetDataFromDB_Call) RunAndReturn(run func() (map[string]repository.Item, error)) *MockDataRepository_GetDataFromDB_Call {
	_c.Call.Return(run)
	return _c
}

// InsertDataIntoListInDB provides a mock function with given fields: key, value
func (_m *MockDataRepository) InsertDataIntoListInDB(key string, value interface{}) (repository.Item, error) {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for InsertDataIntoListInDB")
	}

	var r0 repository.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (repository.Item, error)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) repository.Item); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(repository.Item)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataRepository_InsertDataIntoListInDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertDataIntoListInDB'
type MockDataRepository_InsertDataIntoListInDB_Call struct {
	*mock.Call
}

// InsertDataIntoListInDB is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockDataRepository_Expecter) InsertDataIntoListInDB(key interface{}, value interface{}) *MockDataRepository_InsertDataIntoListInDB_Call {
	return &MockDataRepository_InsertDataIntoListInDB_Call{Call: _e.mock.On("InsertDataIntoListInDB", key, value)}
}

func (_c *MockDataRepository_InsertDataIntoListInDB_Call) Run(run func(key string, value interface{})) *MockDataRepository_InsertDataIntoListInDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDataRepository_InsertDataIntoListInDB_Call) Return(_a0 repository.Item, _a1 error) *MockDataRepository_InsertDataIntoListInDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataRepository_InsertDataIntoListInDB_Call) RunAndReturn(run func(string, interface{}) (repository.Item, error)) *MockDataRepository_InsertDataIntoListInDB_Call {
	_c.Call.Return(run)
	return _c
}

// StartCleanupJob provides a mock function with no fields
func (_m *MockDataRepository) StartCleanupJob() {
	_m.Called()
}

// MockDataRepository_StartCleanupJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartCleanupJob'
type MockDataRepository_StartCleanupJob_Call struct {
	*mock.Call
}

// StartCleanupJob is a helper method to define mock.On call
func (_e *MockDataRepository_Expecter) StartCleanupJob() *MockDataRepository_StartCleanupJob_Call {
	return &MockDataRepository_StartCleanupJob_Call{Call: _e.mock.On("StartCleanupJob")}
}

func (_c *MockDataRepository_StartCleanupJob_Call) Run(run func()) *MockDataRepository_StartCleanupJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDataRepository_StartCleanupJob_Call) Return() *MockDataRepository_StartCleanupJob_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDataRepository_StartCleanupJob_Call) RunAndReturn(run func()) *MockDataRepository_StartCleanupJob_Call {
	_c.Run(run)
	return _c
}

// StoreDataIntoDB provides a mock function with given fields: data, key
func (_m *MockDataRepository) StoreDataIntoDB(data dto.StoredDataInfo, key string) error {
	ret := _m.Called(data, key)

	if len(ret) == 0 {
		panic("no return value specified for StoreDataIntoDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.StoredDataInfo, string) error); ok {
		r0 = rf(data, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataRepository_StoreDataIntoDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreDataIntoDB'
type MockDataRepository_StoreDataIntoDB_Call struct {
	*mock.Call
}

// StoreDataIntoDB is a helper method to define mock.On call
//   - data dto.StoredDataInfo
//   - key string
func (_e *MockDataRepository_Expecter) StoreDataIntoDB(data interface{}, key interface{}) *MockDataRepository_StoreDataIntoDB_Call {
	return &MockDataRepository_StoreDataIntoDB_Call{Call: _e.mock.On("StoreDataIntoDB", data, key)}
}

func (_c *MockDataRepository_StoreDataIntoDB_Call) Run(run func(data dto.StoredDataInfo, key string)) *MockDataRepository_StoreDataIntoDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.StoredDataInfo), args[1].(string))
	})
	return _c
}

func (_c *MockDataRepository_StoreDataIntoDB_Call) Return(_a0 error) *MockDataRepository_StoreDataIntoDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataRepository_StoreDataIntoDB_Call) RunAndReturn(run func(dto.StoredDataInfo, string) error) *MockDataRepository_StoreDataIntoDB_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataIntoDB provides a mock function with given fields: key, data
func (_m *MockDataRepository) UpdateDataIntoDB(key string, data mapper.DataInfo) (repository.Item, error) {
	ret := _m.Called(key, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataIntoDB")
	}

	var r0 repository.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(string, mapper.DataInfo) (repository.Item, error)); ok {
		return rf(key, data)
	}
	if rf, ok := ret.Get(0).(func(string, mapper.DataInfo) repository.Item); ok {
		r0 = rf(key, data)
	} else {
		r0 = ret.Get(0).(repository.Item)
	}

	if rf, ok := ret.Get(1).(func(string, mapper.DataInfo) error); ok {
		r1 = rf(key, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataRepository_UpdateDataIntoDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataIntoDB'
type MockDataRepository_UpdateDataIntoDB_Call struct {
	*mock.Call
}

// UpdateDataIntoDB is a helper method to define mock.On call
//   - key string
//   - data mapper.DataInfo
func (_e *MockDataRepository_Expecter) UpdateDataIntoDB(key interface{}, data interface{}) *MockDataRepository_UpdateDataIntoDB_Call {
	return &MockDataRepository_UpdateDataIntoDB_Call{Call: _e.mock.On("UpdateDataIntoDB", key, data)}
}

func (_c *MockDataRepository_UpdateDataIntoDB_Call) Run(run func(key string, data mapper.DataInfo)) *MockDataRepository_UpdateDataIntoDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(mapper.DataInfo))
	})
	return _c
}

func (_c *MockDataRepository_UpdateDataIntoDB_Call) Return(_a0 repository.Item, _a1 error) *MockDataRepository_UpdateDataIntoDB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataRepository_UpdateDataIntoDB_Call) RunAndReturn(run func(string, mapper.DataInfo) (repository.Item, error)) *MockDataRepository_UpdateDataIntoDB_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataRepository creates a new instance of MockDataRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataRepository {
	mock := &MockDataRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
