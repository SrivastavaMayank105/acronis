// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	dto "acronis/dto"
	mapper "acronis/mapper"

	mock "github.com/stretchr/testify/mock"
)

// MockStoreData is an autogenerated mock type for the StoreData type
type MockStoreData struct {
	mock.Mock
}

type MockStoreData_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStoreData) EXPECT() *MockStoreData_Expecter {
	return &MockStoreData_Expecter{mock: &_m.Mock}
}

// DeleteDataByKey provides a mock function with given fields: key
func (_m *MockStoreData) DeleteDataByKey(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataByKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStoreData_DeleteDataByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataByKey'
type MockStoreData_DeleteDataByKey_Call struct {
	*mock.Call
}

// DeleteDataByKey is a helper method to define mock.On call
//   - key string
func (_e *MockStoreData_Expecter) DeleteDataByKey(key interface{}) *MockStoreData_DeleteDataByKey_Call {
	return &MockStoreData_DeleteDataByKey_Call{Call: _e.mock.On("DeleteDataByKey", key)}
}

func (_c *MockStoreData_DeleteDataByKey_Call) Run(run func(key string)) *MockStoreData_DeleteDataByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStoreData_DeleteDataByKey_Call) Return(_a0 error) *MockStoreData_DeleteDataByKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStoreData_DeleteDataByKey_Call) RunAndReturn(run func(string) error) *MockStoreData_DeleteDataByKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllData provides a mock function with no fields
func (_m *MockStoreData) GetAllData() ([]dto.StoredDataInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllData")
	}

	var r0 []dto.StoredDataInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dto.StoredDataInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.StoredDataInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.StoredDataInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStoreData_GetAllData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllData'
type MockStoreData_GetAllData_Call struct {
	*mock.Call
}

// GetAllData is a helper method to define mock.On call
func (_e *MockStoreData_Expecter) GetAllData() *MockStoreData_GetAllData_Call {
	return &MockStoreData_GetAllData_Call{Call: _e.mock.On("GetAllData")}
}

func (_c *MockStoreData_GetAllData_Call) Run(run func()) *MockStoreData_GetAllData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStoreData_GetAllData_Call) Return(_a0 []dto.StoredDataInfo, _a1 error) *MockStoreData_GetAllData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStoreData_GetAllData_Call) RunAndReturn(run func() ([]dto.StoredDataInfo, error)) *MockStoreData_GetAllData_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataByKey provides a mock function with given fields: key
func (_m *MockStoreData) GetDataByKey(key string) (dto.StoredDataInfo, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetDataByKey")
	}

	var r0 dto.StoredDataInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.StoredDataInfo, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) dto.StoredDataInfo); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(dto.StoredDataInfo)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStoreData_GetDataByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataByKey'
type MockStoreData_GetDataByKey_Call struct {
	*mock.Call
}

// GetDataByKey is a helper method to define mock.On call
//   - key string
func (_e *MockStoreData_Expecter) GetDataByKey(key interface{}) *MockStoreData_GetDataByKey_Call {
	return &MockStoreData_GetDataByKey_Call{Call: _e.mock.On("GetDataByKey", key)}
}

func (_c *MockStoreData_GetDataByKey_Call) Run(run func(key string)) *MockStoreData_GetDataByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStoreData_GetDataByKey_Call) Return(_a0 dto.StoredDataInfo, _a1 error) *MockStoreData_GetDataByKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStoreData_GetDataByKey_Call) RunAndReturn(run func(string) (dto.StoredDataInfo, error)) *MockStoreData_GetDataByKey_Call {
	_c.Call.Return(run)
	return _c
}

// InsertData provides a mock function with given fields: data
func (_m *MockStoreData) InsertData(data mapper.DataInfo) (dto.StoredDataInfo, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for InsertData")
	}

	var r0 dto.StoredDataInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(mapper.DataInfo) (dto.StoredDataInfo, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(mapper.DataInfo) dto.StoredDataInfo); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(dto.StoredDataInfo)
	}

	if rf, ok := ret.Get(1).(func(mapper.DataInfo) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStoreData_InsertData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertData'
type MockStoreData_InsertData_Call struct {
	*mock.Call
}

// InsertData is a helper method to define mock.On call
//   - data mapper.DataInfo
func (_e *MockStoreData_Expecter) InsertData(data interface{}) *MockStoreData_InsertData_Call {
	return &MockStoreData_InsertData_Call{Call: _e.mock.On("InsertData", data)}
}

func (_c *MockStoreData_InsertData_Call) Run(run func(data mapper.DataInfo)) *MockStoreData_InsertData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(mapper.DataInfo))
	})
	return _c
}

func (_c *MockStoreData_InsertData_Call) Return(_a0 dto.StoredDataInfo, _a1 error) *MockStoreData_InsertData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStoreData_InsertData_Call) RunAndReturn(run func(mapper.DataInfo) (dto.StoredDataInfo, error)) *MockStoreData_InsertData_Call {
	_c.Call.Return(run)
	return _c
}

// PopDataFromList provides a mock function with given fields: key, value
func (_m *MockStoreData) PopDataFromList(key string, value interface{}) (dto.StoredDataInfo, error) {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for PopDataFromList")
	}

	var r0 dto.StoredDataInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (dto.StoredDataInfo, error)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) dto.StoredDataInfo); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(dto.StoredDataInfo)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStoreData_PopDataFromList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopDataFromList'
type MockStoreData_PopDataFromList_Call struct {
	*mock.Call
}

// PopDataFromList is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockStoreData_Expecter) PopDataFromList(key interface{}, value interface{}) *MockStoreData_PopDataFromList_Call {
	return &MockStoreData_PopDataFromList_Call{Call: _e.mock.On("PopDataFromList", key, value)}
}

func (_c *MockStoreData_PopDataFromList_Call) Run(run func(key string, value interface{})) *MockStoreData_PopDataFromList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockStoreData_PopDataFromList_Call) Return(_a0 dto.StoredDataInfo, _a1 error) *MockStoreData_PopDataFromList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStoreData_PopDataFromList_Call) RunAndReturn(run func(string, interface{}) (dto.StoredDataInfo, error)) *MockStoreData_PopDataFromList_Call {
	_c.Call.Return(run)
	return _c
}

// PushDataToList provides a mock function with given fields: key, value
func (_m *MockStoreData) PushDataToList(key string, value interface{}) (dto.StoredDataInfo, error) {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for PushDataToList")
	}

	var r0 dto.StoredDataInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (dto.StoredDataInfo, error)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) dto.StoredDataInfo); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(dto.StoredDataInfo)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStoreData_PushDataToList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushDataToList'
type MockStoreData_PushDataToList_Call struct {
	*mock.Call
}

// PushDataToList is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockStoreData_Expecter) PushDataToList(key interface{}, value interface{}) *MockStoreData_PushDataToList_Call {
	return &MockStoreData_PushDataToList_Call{Call: _e.mock.On("PushDataToList", key, value)}
}

func (_c *MockStoreData_PushDataToList_Call) Run(run func(key string, value interface{})) *MockStoreData_PushDataToList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockStoreData_PushDataToList_Call) Return(_a0 dto.StoredDataInfo, _a1 error) *MockStoreData_PushDataToList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStoreData_PushDataToList_Call) RunAndReturn(run func(string, interface{}) (dto.StoredDataInfo, error)) *MockStoreData_PushDataToList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDataByKey provides a mock function with given fields: key, data
func (_m *MockStoreData) UpdateDataByKey(key string, data mapper.DataInfo) (dto.StoredDataInfo, error) {
	ret := _m.Called(key, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataByKey")
	}

	var r0 dto.StoredDataInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, mapper.DataInfo) (dto.StoredDataInfo, error)); ok {
		return rf(key, data)
	}
	if rf, ok := ret.Get(0).(func(string, mapper.DataInfo) dto.StoredDataInfo); ok {
		r0 = rf(key, data)
	} else {
		r0 = ret.Get(0).(dto.StoredDataInfo)
	}

	if rf, ok := ret.Get(1).(func(string, mapper.DataInfo) error); ok {
		r1 = rf(key, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStoreData_UpdateDataByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDataByKey'
type MockStoreData_UpdateDataByKey_Call struct {
	*mock.Call
}

// UpdateDataByKey is a helper method to define mock.On call
//   - key string
//   - data mapper.DataInfo
func (_e *MockStoreData_Expecter) UpdateDataByKey(key interface{}, data interface{}) *MockStoreData_UpdateDataByKey_Call {
	return &MockStoreData_UpdateDataByKey_Call{Call: _e.mock.On("UpdateDataByKey", key, data)}
}

func (_c *MockStoreData_UpdateDataByKey_Call) Run(run func(key string, data mapper.DataInfo)) *MockStoreData_UpdateDataByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(mapper.DataInfo))
	})
	return _c
}

func (_c *MockStoreData_UpdateDataByKey_Call) Return(_a0 dto.StoredDataInfo, _a1 error) *MockStoreData_UpdateDataByKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStoreData_UpdateDataByKey_Call) RunAndReturn(run func(string, mapper.DataInfo) (dto.StoredDataInfo, error)) *MockStoreData_UpdateDataByKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStoreData creates a new instance of MockStoreData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStoreData(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStoreData {
	mock := &MockStoreData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
